//   ==================================================================
//   >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
//   ------------------------------------------------------------------
//   Copyright (c) 2006-2011 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED 
//   ------------------------------------------------------------------
//
//   IMPORTANT: THIS FILE IS AUTO-GENERATED BY THE LATTICEMICO SYSTEM.
//
//   Permission:
//
//      Lattice Semiconductor grants permission to use this code
//      pursuant to the terms of the Lattice Semiconductor Corporation
//      Open Source License Agreement.  
//
//   Disclaimer:
//
//      Lattice Semiconductor provides no warranty regarding the use or
//      functionality of this code. It is the user's responsibility to
//      verify the user’s design for consistency and functionality through
//      the use of formal verification methods.
//
//   --------------------------------------------------------------------
//
//                  Lattice Semiconductor Corporation
//                  5555 NE Moore Court
//                  Hillsboro, OR 97214
//                  U.S.A
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                         503-286-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
//   --------------------------------------------------------------------
//                         FILE DETAILS
// Project          : Slave PassThrough for LM32
// File             : slave_passthru.v
// Title            : Slave PassThrough 
// Dependencies     : system_conf.v
// Description      : Implements the logic to interface external slave with 
//                    Wishbone bus.
// =============================================================================
//                        REVISION HISTORY
// Version          : 3.0
// Mod. Date        : Jun 16, 2008
// Changes Made     : Initial Creation
// =============================================================================

`include "system_conf.v"
module slave_passthru 
  #(parameter S_WB_ADR_WIDTH = 32,
    parameter S_WB_DAT_WIDTH = 32
    )
   (
    // wishbone slave signals
    input [S_WB_ADR_WIDTH-1:0] S_ADR_I,
    input [S_WB_DAT_WIDTH-1:0] S_DAT_I,
    input S_WE_I,
    input [S_WB_DAT_WIDTH/8-1:0] S_SEL_I,
    input S_STB_I,
    input S_CYC_I,
    input S_LOCK_I,
    input [2:0] S_CTI_I,
    input [1:0] S_BTE_I,
    output [S_WB_DAT_WIDTH-1:0] S_DAT_O,
    output S_ACK_O,
    output S_ERR_O,
    output S_RTY_O,
    
    // external signals
    output clk,
    output rst,
    output [S_WB_ADR_WIDTH-1:0] slv_adr,
    output [S_WB_DAT_WIDTH-1:0] slv_master_data,
    input [S_WB_DAT_WIDTH-1:0] slv_slave_data,
    output slv_strb,
    output slv_cyc,
    input slv_ack,
    input slv_err,
    input slv_rty,
    output [S_WB_DAT_WIDTH/8-1:0] slv_sel,
    output slv_we,
    output [1:0] slv_bte,
    output [2:0] slv_cti,
    output slv_lock,
    input intr_active_high,
    
    input CLK_I,
    input RST_I,
    output INTR_O
   );


          // Instantiate the open cores module
          passthru instantiate_passthru ( 

                // Connect Wishbone slave
               .S_ADR_I(S_ADR_I),
               .S_DAT_I(S_DAT_I),
               .S_WE_I(S_WE_I),
               .S_SEL_I(S_SEL_I),
               .S_STB_I(S_STB_I),
               .S_CYC_I(S_CYC_I),
               .S_LOCK_I(S_LOCK_I),
               .S_CTI_I(S_CTI_I),
               .S_BTE_I(S_BTE_I),
               .S_DAT_O(S_DAT_O),
               .S_ACK_O(S_ACK_O),
               .S_ERR_O(S_ERR_O),
               .S_RTY_O(S_RTY_O),

                // Connect External signals
               .clk(clk),
               .rst(rst),
               .slv_adr(slv_adr),
               .slv_master_data(slv_master_data),
               .slv_slave_data(slv_slave_data),
               .slv_strb(slv_strb),
               .slv_cyc(slv_cyc),
               .slv_ack(slv_ack),
               .slv_err(slv_err),
               .slv_rty(slv_rty),
               .slv_sel(slv_sel),
               .slv_we(slv_we),
               .slv_bte(slv_bte),
               .slv_cti(slv_cti),
               .slv_lock(slv_lock),
               .intr_active_high(intr_active_high),

               .CLK_I(CLK_I),
               .RST_I(RST_I),
               .intr_high(INTR_O) );

endmodule

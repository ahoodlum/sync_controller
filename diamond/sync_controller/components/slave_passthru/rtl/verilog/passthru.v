//   ==================================================================
//   >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
//   ------------------------------------------------------------------
//   Copyright (c) 2006-2011 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED 
//   ------------------------------------------------------------------
//
//   IMPORTANT: THIS FILE IS AUTO-GENERATED BY THE LATTICEMICO SYSTEM.
//
//   Permission:
//
//      Lattice Semiconductor grants permission to use this code
//      pursuant to the terms of the Lattice Semiconductor Corporation
//      Open Source License Agreement.  
//
//   Disclaimer:
//
//      Lattice Semiconductor provides no warranty regarding the use or
//      functionality of this code. It is the user's responsibility to
//      verify the user’s design for consistency and functionality through
//      the use of formal verification methods.
//
//   --------------------------------------------------------------------
//
//                  Lattice Semiconductor Corporation
//                  5555 NE Moore Court
//                  Hillsboro, OR 97214
//                  U.S.A
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                         503-286-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
//   --------------------------------------------------------------------
//                         FILE DETAILS
// Project          : Slave PassThrough for LM32
// File             : passthru.v
// Title            : Slave PassThrough Connection
// Dependencies     : system_conf.v
// Description      : Implements the logic to interface external slave with 
//                    Wishbone bus.
// =============================================================================
//                        REVISION HISTORY
// Version          : 3.0
// Mod. Date        : Jun 16, 2008
// Changes Made     : Initial Creation
// =============================================================================

`include "system_conf.v"
module passthru 
  #(parameter S_WB_ADR_WIDTH = 32,
    parameter S_WB_DAT_WIDTH = 32
    )
   (
    // wishbone slave signals
    input [S_WB_ADR_WIDTH-1:0] S_ADR_I,
    input [S_WB_DAT_WIDTH-1:0] S_DAT_I,
    input S_WE_I,
    input [S_WB_DAT_WIDTH/8-1:0] S_SEL_I,
    input S_STB_I,
    input S_CYC_I,
    input S_LOCK_I,
    input [2:0] S_CTI_I,
    input [1:0] S_BTE_I,
    output [S_WB_DAT_WIDTH-1:0] S_DAT_O,
    output S_ACK_O,
    output S_ERR_O,
    output S_RTY_O,
    // clk/reset   
    output clk,
    output rst,
    // external signals (slave passthru)
    output [S_WB_ADR_WIDTH-1:0] slv_adr,
    output [S_WB_DAT_WIDTH-1:0] slv_master_data,
    input [S_WB_DAT_WIDTH-1:0] slv_slave_data,
    output slv_strb,
    output slv_cyc,
    input slv_ack,
    input slv_err,
    input slv_rty,
    output [S_WB_DAT_WIDTH/8-1:0] slv_sel,
    output slv_we,
    output [1:0] slv_bte,
    output [2:0] slv_cti,
    output slv_lock,
    //
    // others
    //
    input CLK_I,
    input RST_I,
    output intr_high,
    input intr_active_high
   );

        //----------------------------------------------------
        //
        // pass signals to an external entity (slave-passthru)
        //
        //----------------------------------------------------
        assign      slv_adr         =   S_ADR_I;
        assign      slv_master_data =   S_DAT_I;
        assign      S_DAT_O         =   slv_slave_data;
        assign      slv_strb        =   S_STB_I;
        assign      slv_cyc         =   S_CYC_I;
        assign      S_ACK_O         =   slv_ack;
        assign      S_ERR_O         =   slv_err;
        assign      S_RTY_O         =   slv_rty;
        assign      slv_sel         =   S_SEL_I;
        assign      slv_we          =   S_WE_I;
        assign      slv_bte         =   S_BTE_I;
        assign      slv_cti         =   S_CTI_I;
        assign      slv_lock        =   S_LOCK_I;
        assign      clk             =   CLK_I;
        assign      rst             =   RST_I;
        assign      intr_high       =   intr_active_high;

endmodule

